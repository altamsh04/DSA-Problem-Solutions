/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
private:
    vector<int> perfectSizes;

    int dfs(TreeNode* node) {
        if (!node) return 0;

        int leftHeight = dfs(node->left);
        int rightHeight = dfs(node->right);

        if (leftHeight != -1 && rightHeight != -1 && leftHeight == rightHeight) {
            int size = (1 << (leftHeight + 1)) - 1;
            perfectSizes.push_back(size);
            return leftHeight + 1;
        }

        return -1;
    }

public:
    int kthLargestPerfectSubtree(TreeNode* root, int k) {
        perfectSizes.clear();
        dfs(root);

        if (perfectSizes.size() < k) {
            return -1;
        }

        nth_element(perfectSizes.begin(), perfectSizes.begin() + k - 1, perfectSizes.end(), greater<int>());
        return perfectSizes[k - 1];
    }
};
